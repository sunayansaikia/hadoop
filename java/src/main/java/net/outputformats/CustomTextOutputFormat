package net.outputformats;

import java.io.DataOutputStream;
import java.io.IOException;

import org.apache.hadoop.conf.Configuration;
import org.apache.hadoop.fs.FSDataOutputStream;
import org.apache.hadoop.fs.FileSystem;
import org.apache.hadoop.fs.Path;
import org.apache.hadoop.io.compress.CompressionCodec;
import org.apache.hadoop.io.compress.GzipCodec;
import org.apache.hadoop.mapreduce.RecordWriter;
import org.apache.hadoop.mapreduce.TaskAttemptContext;
import org.apache.hadoop.mapreduce.lib.output.FileOutputCommitter;
import org.apache.hadoop.mapreduce.lib.output.TextOutputFormat;
import org.apache.hadoop.util.ReflectionUtils;

/**
 * Custom TextOutputFormat to specify our
 * own output path
 * @author Sunayan Saikia
 *
 * @param <K>
 * @param <V>
 */
public class CustomTextOutputFormat<K, V> extends TextOutputFormat<K, V> {

	public RecordWriter<K, V> getBaseRecordWriter(TaskAttemptContext job,
			String name) throws IOException, InterruptedException {
		Configuration conf = job.getConfiguration();
		boolean isCompressed = getCompressOutput(job);
		String keyValueSeparator = conf.get(
				"mapred.textoutputformat.separator", "\t");
		CompressionCodec codec = null;
		String extension = "";
		if (isCompressed) {
			Class<? extends CompressionCodec> codecClass = getOutputCompressorClass(
					job, GzipCodec.class);
			codec = (CompressionCodec) ReflectionUtils.newInstance(codecClass,
					conf);
			extension = codec.getDefaultExtension();
		}
		Path file = getCustomWorkFile(job, name, extension);
		FileSystem fs = file.getFileSystem(conf);
		if (!isCompressed) {
			FSDataOutputStream fileOut = fs.create(file, false);
			return new LineRecordWriter<K, V>(fileOut, keyValueSeparator);
		} else {
			FSDataOutputStream fileOut = fs.create(file, false);
			return new LineRecordWriter<K, V>(new DataOutputStream(
					codec.createOutputStream(fileOut)), keyValueSeparator);
		}
	}
	
	/**
	   * Get the default path and filename for the output format.
	   * @param context the task context
	   * @param extension an extension to add to the filename
	   * @return a full path $output/_temporary/$taskid/part-[mr]-$id
	   * @throws IOException
	   */
	  public Path getCustomWorkFile(TaskAttemptContext context, String name,
	                                 String extension) throws IOException{
	    FileOutputCommitter committer = 
	      (FileOutputCommitter) getOutputCommitter(context);
	    return new Path(committer.getWorkPath(), getUniqueFile(context, name, 
	                                                           extension));
	  }

	/**
	 * Get the default path and filename for the output format.
	 * 
	 * @param context
	 *            the task context
	 * @param extension
	 *            an extension to add to the filename
	 * @return a full path $output/_temporary/$taskid/part-[mr]-$id
	 * @throws IOException
	 */
	public Path getOutputPath(TaskAttemptContext context, String extension)
			throws IOException {
		FileOutputCommitter committer = (FileOutputCommitter) getOutputCommitter(context);
		return new Path(committer.getWorkPath(),
				getUniqueFile(context, "part", extension));
	}
}
