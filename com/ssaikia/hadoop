package com.ssaikia.hadoop

import java.io.IOException;
import java.util.Iterator;
import java.util.TreeMap;

import org.apache.hadoop.conf.Configuration;
import org.apache.hadoop.fs.Path;
import org.apache.hadoop.mapreduce.RecordWriter;
import org.apache.hadoop.mapreduce.TaskAttemptContext;
import org.apache.hadoop.mapreduce.lib.output.FileOutputFormat;
import org.apache.hadoop.mapreduce.lib.output.TextOutputFormat;

/**
 * Custom multiple file output format for hadoop 0.20.2 and above.
 * @author Sunayan Saikia
 *
 * @param <K>
 * @param <V>
 */

public class CustomMultipleOutputFormat<K, V> extends FileOutputFormat<K, V>{

	@Override
	public RecordWriter<K, V> getRecordWriter(final TaskAttemptContext context)
			throws IOException, InterruptedException {
		    final String myName = generateLeafFileName(String.valueOf(context.getTaskAttemptID().getTaskID().getId()));

		    return new RecordWriter<K, V>() {

		      // a cache storing the record writers for different output files.
		      TreeMap<String, RecordWriter<K, V>> recordWriters = new TreeMap<String, RecordWriter<K, V>>();

		      public void write(K key, V value) throws IOException {

		        // get the file name based on the key
		        String keyBasedPath = generateFileNameForKeyValue(key, value, myName);

		        // get the file name based on the input file name
		        String finalPath = getInputFileBasedOutputFileName(context, keyBasedPath);

		        // get the actual key
		        K actualKey = generateActualKey(key, value);
		        V actualValue = generateActualValue(key, value);

		        RecordWriter<K, V> rw = this.recordWriters.get(finalPath);
		        if (rw == null) {
		          // if we don't have the record writer yet for the final path, create
		          // one
		          // and add it to the cache
		          rw = getBaseRecordWriter(context);
		          this.recordWriters.put(finalPath, rw);
		        }
		        try {
					rw.write(actualKey, actualValue);
				} catch (InterruptedException e) {
					//TODO:Please handle how you like it. I have no idea
				}
		      };

			@Override
			public void close(TaskAttemptContext context) throws IOException,
					InterruptedException {
				 Iterator<String> keys = this.recordWriters.keySet().iterator();
			        while (keys.hasNext()) {
			          RecordWriter<K, V> rw = this.recordWriters.get(keys.next());
			          rw.close(context);
			        }
			        this.recordWriters.clear();
			};
		    };
	}
	
	 /**
	   * Generate the leaf name for the output file name. The default behavior does
	   * not change the leaf file name (such as part-00000)
	   * 
	   * @param name
	   *          the leaf file name for the output file
	   * @return the given leaf file name
	   */
	  protected String generateLeafFileName(String name) {
	    return name;
	  }

	  /**
	   * Generate the file output file name based on the given key and the leaf file
	   * name. The default behavior is that the file name does not depend on the
	   * key.
	   * 
	   * @param key
	   *          the key of the output data
	   * @param name
	   *          the leaf file name
	   * @return generated file name
	   */
	  protected String generateFileNameForKeyValue(K key, V value, String name) {
	    return name;
	  }

	  /**
	   * Generate the actual key from the given key/value. The default behavior is that
	   * the actual key is equal to the given key
	   * 
	   * @param key
	   *          the key of the output data
	   * @param value
	   *          the value of the output data
	   * @return the actual key derived from the given key/value
	   */
	  protected K generateActualKey(K key, V value) {
	    return key;
	  }
	  
	  /**
	   * Generate the actual value from the given key and value. The default behavior is that
	   * the actual value is equal to the given value
	   * 
	   * @param key
	   *          the key of the output data
	   * @param value
	   *          the value of the output data
	   * @return the actual value derived from the given key/value
	   */
	  protected V generateActualValue(K key, V value) {
	    return value;
	  }
	  

	  /**
	   * Generate the outfile name based on a given anme and the input file name. If
	   * the map input file does not exists (i.e. this is not for a map only job),
	   * the given name is returned unchanged. If the config value for
	   * "num.of.trailing.legs.to.use" is not set, or set 0 or negative, the given
	   * name is returned unchanged. Otherwise, return a file name consisting of the
	   * N trailing legs of the input file name where N is the config value for
	   * "num.of.trailing.legs.to.use".
	   * 
	   * @param job
	   *          the job config
	   * @param name
	   *          the output file name
	   * @return the outfile name based on a given anme and the input file name.
	   */
	  protected String getInputFileBasedOutputFileName(TaskAttemptContext context, String name) {
		  
		Configuration conf = context.getConfiguration();
	    String infilepath = conf.get("map.input.file");
	    if (infilepath == null) {
	      // if the map input file does not exists, then return the given name
	      return name;
	    }
	    int numOfTrailingLegsToUse = conf.getInt("mapred.outputformat.numOfTrailingLegs", 0);
	    if (numOfTrailingLegsToUse <= 0) {
	      return name;
	    }
	    Path infile = new Path(infilepath);
	    Path parent = infile.getParent();
	    String midName = infile.getName();
	    Path outPath = new Path(midName);
	    for (int i = 1; i < numOfTrailingLegsToUse; i++) {
	      if (parent == null) break;
	      midName = parent.getName();
	      if (midName.length() == 0) break;
	      parent = parent.getParent();
	      outPath = new Path(midName, outPath);
	    }
	    return outPath.toString();
	  }

	  /**
	   * 
	   * @param fs
	   *          the file system to use
	   * @param job
	   *          a job conf object
	   * @param name
	   *          the name of the file over which a record writer object will be
	   *          constructed
	   * @param arg3
	   *          a progressable object
	   * @return A RecordWriter object over the given file
	   * @throws IOException
	   */
	  private TextOutputFormat<K, V> theTextOutputFormat = null;
	  protected RecordWriter<K, V> getBaseRecordWriter(TaskAttemptContext context) throws IOException{
		 if (theTextOutputFormat == null) {
		      theTextOutputFormat = new TextOutputFormat<K, V>();
		 }
		 RecordWriter<K, V> rw = null;
	     try {
	    	 rw =  theTextOutputFormat.getRecordWriter(context);
		 } catch (InterruptedException e) {
			 //TODO:Please handle, if possible
		 }
	     return rw;
	  }
}
